{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","connect","then","clientDB","listen","console","log","catch","err","cache","tick","trade","get","req","res","data","status","message","post","body","collection","insertOne","sendStatus","type"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAJmD;AAMnD,2BAAiBA,OAAjB,G,CALyB;;AAMzB,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEA,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiDC,IAAjD,CAAuDC,QAAD,IAAc;AACnEH,MAAKG,SAASH,EAAT,CAAY,WAAZ,CAAL,CADmE,CACpC;AAC/BJ,KAAIQ,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACtBC,UAAQC,GAAR,CAAY,0BAAZ;AACA,EAFD;AAGA,CALD,EAKGC,KALH,CAKUC,GAAD,IAAS;AACjBH,SAAQC,GAAR,CAAY,SAAZ,EAAuBE,GAAvB;AACA,CAPD;;AASA,IAAIC,QAAQ,EAAEC,MAAM,IAAR,EAAcC,OAAO,IAArB,EAAZ;;AAEA;AACAf,IAAIgB,GAAJ,CAAQ,eAAR,EAAyB,CAACC,GAAD,EAAMC,GAAN,KAAa;AACrC,KAAIL,MAAMC,IAAV,EAAiB;AAChB,MAAIK,OAAON,MAAMC,IAAjB;AACAD,QAAMC,IAAN,GAAa,IAAb;AACAI,MAAIf,IAAJ,CAASgB,IAAT;AACA,EAJD,MAIO;AACND,MAAIE,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB,EAACkB,SAAS,aAAV,EAArB;AACA;;AAED;;;;;;;;;;AAUA,CAnBD;;AAqBArB,IAAIgB,GAAJ,CAAQ,gBAAR,EAA0B,CAACC,GAAD,EAAMC,GAAN,KAAa;AACtC,KAAIL,MAAME,KAAV,EAAkB;AACjB,MAAII,OAAON,MAAME,KAAjB;AACAF,QAAME,KAAN,GAAc,IAAd;AACAG,MAAIf,IAAJ,CAASgB,IAAT;AACA,EAJD,MAIO;AACND,MAAIE,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB,EAACkB,SAAS,aAAV,EAArB;AACA;AACD,CARD;;AAWArB,IAAIsB,IAAJ,CAAS,UAAT,EAAqB,CAACL,GAAD,EAAMC,GAAN,KAAc;AAClC;;;;;;;;;;AAWA,OAAMC,OAAOF,IAAIM,IAAjB,CAZkC,CAYX;;AAEvBnB,IAAGoB,UAAH,CAAc,KAAd,EAAqBC,SAArB,CAA+BN,IAA/B,EAAqCb,IAArC,CAA2C,MAAI;AAC9CY,MAAIQ,UAAJ,CAAe,GAAf;AACAb,QAAMM,KAAKQ,IAAX,IAAmBR,IAAnB;AACA,EAHD,EAIER,KAJF,CAISC,GAAD,IAAS;AACfH,UAAQC,GAAR,CAAYE,GAAZ;AACAM,MAAIE,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB,EAAEkB,SAAU,0BAAyBT,GAAI,EAAzC,EAArB;AACA,EAPF;AAQA,CAtBD","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support'; // npm install --save source-map-support\nimport 'babel-polyfill'; // ES2015-completed\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\n\nSourceMapSupport.install();\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\nMongoClient.connect('mongodb://localhost:27017').then((clientDB) => {\n\tdb = clientDB.db('arbitrage'); // new from version 3.0\n\tapp.listen(3000, () => {\n\t\tconsole.log('App started on port 3000');\n\t});\n}).catch((err) => {\n\tconsole.log('ERROR: ', err);\n});\n\nlet cache = { tick: null, trade: null};\n\n// return latest doc from mongo\napp.get('/api/btc-tick', (req, res)=> {\n\tif( cache.tick ) {\n\t\tlet data = cache.tick;\n\t\tcache.tick = null;\n\t\tres.json(data);\n\t} else {\n\t\tres.status(500).json({message: 'no data yet'});\n\t}\n\n\t/*\n\tdb.collection('btc').find().sort({_id:-1}).limit(1).toArray().then( (latest)=>\n\t{\n\t\tres.json(latest);\n\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tres.status(500).json({ message: `Internal Server Error: ${err}` });\n\t\t});  \n\t*/\n});\n\napp.get('/api/btc-trade', (req, res)=> {\n\tif( cache.trade ) {\n\t\tlet data = cache.trade;\n\t\tcache.trade = null;\n\t\tres.json(data);\n\t} else {\n\t\tres.status(500).json({message: 'no data yet'});\n\t}\n});\n\n\napp.post('/api/btc', (req, res) => {\n\t/* // -- no mongod \n\tres.sendStatus(200);\n\tconst data = req.body; // body-parser assign to it\n\tif(data.type=='tick') {\n\t\tcache.tick = data;\n\t} else if (data.type=='trade') {\n\t\tcache.trade = data;\n\t}\n\t*/\n\t\n\t\n\tconst data = req.body; // body-parser assign to it\n\t\n\tdb.collection('btc').insertOne(data).then( ()=>{\n\t\tres.sendStatus(200);\n\t\tcache[data.type] = data;\n\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tres.status(500).json({ message: `Internal Server Error: ${err}` });\n\t\t});\n});\n\n"]}