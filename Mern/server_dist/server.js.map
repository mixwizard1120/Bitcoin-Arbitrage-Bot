{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","cache","connect","then","clientDB","listen","console","log","catch","err","get","req","res","data","status","message","post","tick","body","sendStatus"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAJmD;AAMnD,2BAAiBA,OAAjB,G,CALyB;;AAMzB,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA,IAAIC,EAAJ;AACA,IAAIC,QAAQ,IAAZ;;AAEA,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiDC,IAAjD,CAAuDC,QAAD,IAAc;AACnEJ,MAAKI,SAASJ,EAAT,CAAY,WAAZ,CAAL,CADmE,CACpC;AAC/BJ,KAAIS,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACtBC,UAAQC,GAAR,CAAY,0BAAZ;AACA,EAFD;AAGA,CALD,EAKGC,KALH,CAKUC,GAAD,IAAS;AACjBH,SAAQC,GAAR,CAAY,SAAZ,EAAuBE,GAAvB;AACA,CAPD;;AAWA;AACAb,IAAIc,GAAJ,CAAQ,UAAR,EAAoB,CAACC,GAAD,EAAMC,GAAN,KAAa;AAChC,KAAIX,KAAJ,EAAY;AACX,MAAIY,OAAOZ,KAAX;AACAA,UAAQ,IAAR;AACAW,MAAIb,IAAJ,CAASc,IAAT;AACA,EAJD,MAIO;AACND,MAAIE,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB,EAACgB,SAAS,aAAV,EAArB;AACA;;AAED;;;;;;;;;;AAUA,CAnBD;;AAqBAnB,IAAIoB,IAAJ,CAAS,UAAT,EAAqB,CAACL,GAAD,EAAMC,GAAN,KAAc;AAClC,OAAMK,OAAON,IAAIO,IAAjB,CADkC,CACX;AACvBjB,SAAQgB,IAAR;AACAL,KAAIO,UAAJ,CAAe,GAAf;;AAEA;;;;;;;;AAQA,CAbD","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support'; // npm install --save source-map-support\nimport 'babel-polyfill'; // ES2015-completed\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\n\nSourceMapSupport.install();\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\nlet cache = null;\n\nMongoClient.connect('mongodb://localhost:27017').then((clientDB) => {\n\tdb = clientDB.db('arbitrage'); // new from version 3.0\n\tapp.listen(3000, () => {\n\t\tconsole.log('App started on port 3000');\n\t});\n}).catch((err) => {\n\tconsole.log('ERROR: ', err);\n});\n\n\n\n// return latest doc from mongo\napp.get('/api/btc', (req, res)=> {\n\tif( cache ) {\n\t\tlet data = cache;\n\t\tcache = null;\n\t\tres.json(data);\n\t} else {\n\t\tres.status(500).json({message: 'no data yet'});\n\t}\n\n\t/*\n\tdb.collection('btc').find().sort({_id:-1}).limit(1).toArray().then( (latest)=>\n\t{\n\t\tres.json(latest);\n\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tres.status(500).json({ message: `Internal Server Error: ${err}` });\n\t\t});  \n\t*/\n});\n\napp.post('/api/btc', (req, res) => {\n\tconst tick = req.body; // body-parser assign to it\n\tcache = tick;\n\tres.sendStatus(200);\n\n\t/*\n\tdb.collection('btc').insertOne(tick).then( ()=>{\n\t\tres.sendStatus(200);\n\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\tres.status(500).json({ message: `Internal Server Error: ${err}` });\n\t\t}); */\n});\n\n"]}